// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiteMQ_Enqueue_FullMethodName = "/LiteMQ/Enqueue"
	LiteMQ_Dequeue_FullMethodName = "/LiteMQ/Dequeue"
	LiteMQ_Purge_FullMethodName   = "/LiteMQ/Purge"
	LiteMQ_Length_FullMethodName  = "/LiteMQ/Length"
	LiteMQ_Health_FullMethodName  = "/LiteMQ/Health"
)

// LiteMQClient is the client API for LiteMQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiteMQClient interface {
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*QueueLength, error)
	Dequeue(ctx context.Context, in *QueueID, opts ...grpc.CallOption) (*DequeueResponse, error)
	Purge(ctx context.Context, in *QueueID, opts ...grpc.CallOption) (*QueueLength, error)
	Length(ctx context.Context, in *QueueID, opts ...grpc.CallOption) (*QueueLength, error)
	Health(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
}

type liteMQClient struct {
	cc grpc.ClientConnInterface
}

func NewLiteMQClient(cc grpc.ClientConnInterface) LiteMQClient {
	return &liteMQClient{cc}
}

func (c *liteMQClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*QueueLength, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueLength)
	err := c.cc.Invoke(ctx, LiteMQ_Enqueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteMQClient) Dequeue(ctx context.Context, in *QueueID, opts ...grpc.CallOption) (*DequeueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, LiteMQ_Dequeue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteMQClient) Purge(ctx context.Context, in *QueueID, opts ...grpc.CallOption) (*QueueLength, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueLength)
	err := c.cc.Invoke(ctx, LiteMQ_Purge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteMQClient) Length(ctx context.Context, in *QueueID, opts ...grpc.CallOption) (*QueueLength, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueLength)
	err := c.cc.Invoke(ctx, LiteMQ_Length_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteMQClient) Health(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, LiteMQ_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiteMQServer is the server API for LiteMQ service.
// All implementations must embed UnimplementedLiteMQServer
// for forward compatibility.
type LiteMQServer interface {
	Enqueue(context.Context, *EnqueueRequest) (*QueueLength, error)
	Dequeue(context.Context, *QueueID) (*DequeueResponse, error)
	Purge(context.Context, *QueueID) (*QueueLength, error)
	Length(context.Context, *QueueID) (*QueueLength, error)
	Health(context.Context, *Nothing) (*Nothing, error)
	mustEmbedUnimplementedLiteMQServer()
}

// UnimplementedLiteMQServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiteMQServer struct{}

func (UnimplementedLiteMQServer) Enqueue(context.Context, *EnqueueRequest) (*QueueLength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedLiteMQServer) Dequeue(context.Context, *QueueID) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedLiteMQServer) Purge(context.Context, *QueueID) (*QueueLength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (UnimplementedLiteMQServer) Length(context.Context, *QueueID) (*QueueLength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Length not implemented")
}
func (UnimplementedLiteMQServer) Health(context.Context, *Nothing) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedLiteMQServer) mustEmbedUnimplementedLiteMQServer() {}
func (UnimplementedLiteMQServer) testEmbeddedByValue()                {}

// UnsafeLiteMQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiteMQServer will
// result in compilation errors.
type UnsafeLiteMQServer interface {
	mustEmbedUnimplementedLiteMQServer()
}

func RegisterLiteMQServer(s grpc.ServiceRegistrar, srv LiteMQServer) {
	// If the following call pancis, it indicates UnimplementedLiteMQServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiteMQ_ServiceDesc, srv)
}

func _LiteMQ_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteMQServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiteMQ_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteMQServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteMQ_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteMQServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiteMQ_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteMQServer).Dequeue(ctx, req.(*QueueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteMQ_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteMQServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiteMQ_Purge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteMQServer).Purge(ctx, req.(*QueueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteMQ_Length_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteMQServer).Length(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiteMQ_Length_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteMQServer).Length(ctx, req.(*QueueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteMQ_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteMQServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiteMQ_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteMQServer).Health(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

// LiteMQ_ServiceDesc is the grpc.ServiceDesc for LiteMQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiteMQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LiteMQ",
	HandlerType: (*LiteMQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _LiteMQ_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _LiteMQ_Dequeue_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _LiteMQ_Purge_Handler,
		},
		{
			MethodName: "Length",
			Handler:    _LiteMQ_Length_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _LiteMQ_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
